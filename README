# Vape Identifier App

Um aplicativo mobile em **React Native (Expo)** que permite ao usuário tirar uma foto de um cigarro eletrônico (vape) e obter informações detalhadas sobre o modelo identificado por meio de um modelo de IA treinado no Teachable Machine.

---

## 🧩 Tecnologias utilizadas

- **Frontend:**  
  - React Native (Expo)  
  - Axios (para consumo da API)

- **Backend:**  
  - FastAPI  
  - TensorFlow / Keras (modelo de classificação de imagens)  
  - Pillow (processamento de imagens)  
  - Numpy  
  - CORS Middleware  

---

## 📦 Estrutura do projeto

.
├── backend/
│ ├── main.py # Código FastAPI (este arquivo)
│ ├── modelo/
│ │ └── keras_model.h5 # Modelo treinado no Teachable Machine
│ ├── requirements.txt # Dependências do backend
│ └── README.md
└── frontend/
└── (código do seu app React Native)

---

## 🚀 Como rodar o Backend (localmente)

1. Clone o repositório:
   ```
   git clone https://github.com/seuusuario/vape-identifier.git
   cd vape-identifier/backend
Crie um ambiente virtual:


python -m venv venv
source venv/bin/activate  # Linux/macOS
venv\Scripts\activate     # Windows
Instale as dependências:


pip install -r requirements.txt
Coloque o modelo treinado (keras_model.h5) na pasta ./modelo/.

Rode o servidor:


uvicorn main:app --reload --host 0.0.0.0 --port 8080
O servidor ficará disponível em:

arduino
http://localhost:8080
🌟 Exemplo de requisição do Frontend
Para enviar a imagem capturada no app e receber o modelo do vape identificado:

javascript
import axios from 'axios';

// Substitua pela URL do seu servidor backend (por exemplo, local ou produção)
const API_URL = 'https://greenspire.onrender.com/predict/';

async function enviarImagemVape(uri) {
  const formData = new FormData();
  formData.append('file', {
    uri,
    type: 'image/jpeg',
    name: 'foto.jpg',
  });

  try {
    const response = await axios.post(API_URL, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    console.log('Resposta da API:', response.data);
    // { class: "VapePen", confidence: 0.95 }
  } catch (error) {
    console.error('Erro ao enviar imagem:', error);
  }
}
🪄 Como inicializar o Frontend (Expo)
Instale o Expo CLI (caso ainda não tenha):


npm install -g expo-cli
Na pasta frontend/, instale as dependências:


cd ../frontend
npm install
Inicie o app:


expo start
Abra no seu celular usando o Expo Go (disponível na Play Store / App Store).

☁️ Como rodar no Render
O backend já está disponível em produção no seguinte endpoint:

https://greenspire.onrender.com/predict/
Caso queira fazer modificações e atualizar o deploy:

Faça as alterações no repositório.

O Render irá automaticamente detectar e fazer o build do projeto (caso configurado com GitHub).

Ou acesse o painel do Render e clique em "Manual Deploy".

⚙️ Notas adicionais
Segurança: Em produção, use HTTPS (Render já fornece) e configure corretamente seu CORS (não use "*" em produção).

Monitoramento: Considere usar serviços como Sentry ou ferramentas do próprio Render.

Banco de dados: Atualmente, o app não usa persistência além do modelo. Se desejar armazenar históricos de imagens, sugiro PostgreSQL ou MongoDB.

📄 Sobre o projeto
Este projeto foi desenvolvido para identificar diferentes tipos de vapes, utilizando um modelo de IA treinado no Teachable Machine do Google.
Atualmente suporta as seguintes classes:

✅ VapeBox
✅ VapePen
✅ VapePod
✅ NaoVape

