# 📸 Vape Identifier App - README

Este projeto tem como objetivo identificar modelos de cigarros eletrônicos (vapes) usando a câmera do celular em um app React Native (Expo), com um backend em Python (FastAPI) que roda um modelo de IA treinado no Teachable Machine.

---

## 🔥 Fluxo do aplicativo

✅ Usuário abre a câmera no app e tira foto do vape  
✅ A foto é enviada para a API backend (FastAPI)  
✅ O backend usa o modelo de IA treinado para classificar a imagem  
✅ O app recebe a resposta e abre uma tela com informações detalhadas sobre o modelo de vape identificado (descrição, preço, etc.)

---

## ⚙️ Tecnologias usadas

- **Frontend (Mobile)**: React Native (Expo)
- **Backend**: Python (FastAPI)
- **Modelo de IA**: Teachable Machine
- **Túnel para expor API local**: ngrok

---

## 🚀 Como rodar o backend (FastAPI)

1️⃣ Instalar as dependências do backend:
```
pip install -r requirements.txt
2️⃣ Iniciar o servidor local:

uvicorn main:app --reload --port 8000

🌐 Usando o ngrok para expor a API local
1️⃣ Instalar o ngrok:

npm install -g ngrok
ou

brew install ngrok
2️⃣ Iniciar o túnel ngrok para a porta 8000 (onde roda o FastAPI):

ngrok http 8000
3️ a URL gerada pelo ngrok, que vai parecer com:

cp
https://9b84-xxxxx.ngrok.io
Essa URL será usada no app React Native para se comunicar com a API.
Ela muda ao ser reiniciada!!!!!

💻 O que o time de Frontend precisa saber
✅ Toda requisição de classificação de imagem deve ser feita para a URL gerada pelo ngrok (ex.: https://9b84-xxxxx.ngrok.io/classify).

✅ Exemplo de requisição com fetch:

j
const response = await fetch('https://9b84-xxxxx.ngrok.io/classify', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    image: base64Image // imagem em base64
  })
});
const data = await response.json();
✅ Exemplo de requisição com axios:

j
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://9b84-xxxxx.ngrok.io',
});

const classifyVape = async (base64Image) => {
  const response = await api.post('/classify', { image: base64Image });
  return response.data;
};
✅ Importante: A URL do ngrok muda sempre que reiniciado. Se quiser URL fixa, usar plano pago do ngrok.

📲 Recursos a serem baixados/instalados para o Frontend
✅ Node.js (versão recomendada: LTS)
✅ Expo CLI

npm install -g expo-cli
✅ Bibliotecas principais (já presentes em projetos Expo, mas revisar):

react-native-camera ou expo-camera

axios (opcional, para requisições HTTP mais simples)

react-navigation (para navegação entre telas)

💡 Observações para o Frontend
Antes de testar no app real, verificar se o túnel ngrok e a API estão ativos.

A comunicação é via HTTPS (o ngrok já fornece isso, então não precisa se preocupar).

Enviar a foto como base64 no corpo do POST. Pode usar:

const base64Image = await FileSystem.readAsStringAsync(uri, { encoding: 'base64' });
📦 Como treinar um novo modelo no Teachable Machine
✅ Acesse o Teachable Machine
✅ Crie um novo projeto com as classes de cada modelo de vape
✅ Exporte o modelo em formato compatível (preferencialmente TensorFlow.js ou outro que seja usado no backend FastAPI)

📝 Resumo
🚀 Backend: FastAPI rodando localmente (uvicorn main:app --reload --port 8000)

🌐 Túnel: ngrok http 8000 para gerar a URL pública

📲 App React Native faz POST para a URL gerada

🧠 Modelo de IA classifica e responde com detalhes do vape